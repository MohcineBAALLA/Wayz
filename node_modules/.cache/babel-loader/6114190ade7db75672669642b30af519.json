{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houss\\\\desktop\\\\driver\\\\src\\\\Space\\\\Space.js\";\nimport React, { Component } from 'react';\nimport './Space.css';\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Space extends Component {\n  componentDidMount() {\n    let scene, camera, renderer, starGeo, stars;\n\n    function init() {\n      //create scene object\n      scene = new THREE.Scene(); //setup camera with facing upward\n\n      camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n      camera.position.z = 1;\n      camera.rotation.x = Math.PI / 2; //setup renderer\n\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.domElement);\n      starGeo = new THREE.BufferGeometry();\n\n      for (let i = 0; i < 6000; i++) {\n        let star = new THREE.Vector3(Math.random() * 600 - 300, Math.random() * 600 - 300, Math.random() * 600 - 300);\n        starGeo.vertices.push(star);\n      }\n\n      let sprite = new THREE.TextureLoader().load('star.png');\n      let starMaterial = new THREE.PointsMaterial({\n        color: 0xaaaaaa,\n        size: 0.7,\n        map: sprite\n      });\n      stars = new THREE.Points(starGeo, starMaterial);\n      scene.add(stars);\n      animate();\n    } //rendering loop\n\n\n    function animate() {\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    init();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Space;","map":{"version":3,"sources":["C:/Users/houss/desktop/driver/src/Space/Space.js"],"names":["React","Component","THREE","Space","componentDidMount","scene","camera","renderer","starGeo","stars","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","rotation","x","Math","PI","WebGLRenderer","setSize","document","body","appendChild","domElement","BufferGeometry","i","star","Vector3","random","vertices","push","sprite","TextureLoader","load","starMaterial","PointsMaterial","color","size","map","Points","add","animate","render","requestAnimationFrame"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,aAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,MAAMC,KAAN,SAAoBF,SAApB,CAA6B;AAC5BG,EAAAA,iBAAiB,GAAG;AAEjB,QAAIC,KAAJ,EAAWC,MAAX,EAAmBC,QAAnB,EAA4BC,OAA5B,EAAoCC,KAApC;;AAEA,aAASC,IAAT,GAAgB;AACd;AACAL,MAAAA,KAAK,GAAG,IAAIH,KAAK,CAACS,KAAV,EAAR,CAFc,CAId;;AACAL,MAAAA,MAAM,GAAG,IAAIJ,KAAK,CAACU,iBAAV,CAA4B,EAA5B,EAA+BC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA1D,EAAuE,CAAvE,EAA0E,IAA1E,CAAT;AACAT,MAAAA,MAAM,CAACU,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACAX,MAAAA,MAAM,CAACY,QAAP,CAAgBC,CAAhB,GAAoBC,IAAI,CAACC,EAAL,GAAQ,CAA5B,CAPc,CASd;;AACAd,MAAAA,QAAQ,GAAG,IAAIL,KAAK,CAACoB,aAAV,EAAX;AACAf,MAAAA,QAAQ,CAACgB,OAAT,CAAiBV,MAAM,CAACC,UAAxB,EAAoCD,MAAM,CAACE,WAA3C;AACAS,MAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BnB,QAAQ,CAACoB,UAAnC;AACNnB,MAAAA,OAAO,GAAG,IAAIN,KAAK,CAAC0B,cAAV,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,IAAd,EAAmBA,CAAC,EAApB,EAAwB;AACpB,YAAIC,IAAI,GAAG,IAAI5B,KAAK,CAAC6B,OAAV,CACXX,IAAI,CAACY,MAAL,KAAgB,GAAhB,GAAsB,GADX,EAEXZ,IAAI,CAACY,MAAL,KAAgB,GAAhB,GAAsB,GAFX,EAGXZ,IAAI,CAACY,MAAL,KAAgB,GAAhB,GAAsB,GAHX,CAAX;AAKFxB,QAAAA,OAAO,CAACyB,QAAR,CAAiBC,IAAjB,CAAsBJ,IAAtB;AACD;;AACK,UAAIK,MAAM,GAAG,IAAIjC,KAAK,CAACkC,aAAV,GAA0BC,IAA1B,CAAgC,UAAhC,CAAb;AACA,UAAIC,YAAY,GAAG,IAAIpC,KAAK,CAACqC,cAAV,CAAyB;AAC5CC,QAAAA,KAAK,EAAE,QADqC;AAE5CC,QAAAA,IAAI,EAAE,GAFsC;AAG5CC,QAAAA,GAAG,EAAEP;AAHuC,OAAzB,CAAnB;AAKC1B,MAAAA,KAAK,GAAG,IAAIP,KAAK,CAACyC,MAAV,CAAiBnC,OAAjB,EAAyB8B,YAAzB,CAAR;AACPjC,MAAAA,KAAK,CAACuC,GAAN,CAAUnC,KAAV;AACMoC,MAAAA,OAAO;AACR,KAnCgB,CAoCjB;;;AACA,aAASA,OAAT,GAAmB;AACjBtC,MAAAA,QAAQ,CAACuC,MAAT,CAAgBzC,KAAhB,EAAuBC,MAAvB;AACAyC,MAAAA,qBAAqB,CAACF,OAAD,CAArB;AACD;;AACDnC,IAAAA,IAAI;AAGL;;AACDoC,EAAAA,MAAM,GAAE;AACT,wBAEE;AAAA;AAAA;AAAA;AAAA,YAFF;AAIA;;AAnD4B;;AAqD7B,eAAe3C,KAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport './Space.css';\r\nimport * as THREE from \"three\";\r\n\r\nclass Space extends Component{\r\n\tcomponentDidMount() {\r\n    \r\n    let scene, camera, renderer,starGeo,stars;\r\n\r\n    function init() {\r\n      //create scene object\r\n      scene = new THREE.Scene();\r\n      \r\n      //setup camera with facing upward\r\n      camera = new THREE.PerspectiveCamera(60,window.innerWidth / window.innerHeight, 1, 1000);\r\n      camera.position.z = 1;\r\n      camera.rotation.x = Math.PI/2;\r\n      \r\n      //setup renderer\r\n      renderer = new THREE.WebGLRenderer();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      document.body.appendChild(renderer.domElement);\r\nstarGeo = new THREE.BufferGeometry();\r\nfor(let i=0;i<6000;i++) {\r\n    let star = new THREE.Vector3(\r\n    Math.random() * 600 - 300,\r\n    Math.random() * 600 - 300,\r\n    Math.random() * 600 - 300\r\n  );\r\n  starGeo.vertices.push(star);\r\n}\r\n      let sprite = new THREE.TextureLoader().load( 'star.png' );\r\n      let starMaterial = new THREE.PointsMaterial({\r\n      color: 0xaaaaaa,\r\n      size: 0.7,\r\n      map: sprite\r\n});\r\n       stars = new THREE.Points(starGeo,starMaterial);\r\nscene.add(stars);\r\n      animate(); \r\n    }\r\n    //rendering loop\r\n    function animate() {\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    }\r\n    init();\r\n    \r\n\r\n  }\r\n  render(){\r\n\treturn(\r\n   \r\n   <div/>\r\n\t\t)\r\n}\r\n}\r\nexport default Space;"]},"metadata":{},"sourceType":"module"}