{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houss\\\\desktop\\\\wayz\\\\src\\\\Space\\\\Space.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\nimport { CubeTextureLoader, CubeCamera, WebGLCubeRenderTarget, RGBFormat, LinearMipmapLinearFilter } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport \"./Space.css\";\nimport side1 from './side1.jpg';\nimport side2 from './side2.jpg';\nimport side3 from './side3.jpg';\nimport side4 from './side4.jpg';\nimport side5 from './side5.jpg';\nimport side6 from './side6.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nextend({\n  OrbitControls\n});\n\nconst CameraControls = () => {\n  _s();\n\n  // Get a reference to the Three.js Camera, and the canvas html element.\n  // We need these to setup the OrbitControls class.\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\n  const {\n    camera,\n    gl: {\n      domElement\n    }\n  } = useThree(); // Ref to the controls, so that we can update them on every frame using useFrame\n\n  const controls = useRef();\n  useFrame(() => controls.current.update());\n  return /*#__PURE__*/_jsxDEV(\"orbitControls\", {\n    ref: controls,\n    args: [camera, domElement],\n    autoRotate: true,\n    enableZoom: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}; // Loads the skybox texture and applies it to the scene.\n\n\n_s(CameraControls, \"0lqMx0RvITfPBVZ7byO+aPfYawA=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c = CameraControls;\n\nfunction SkyBox() {\n  _s2();\n\n  const {\n    scene\n  } = useThree();\n  const loader = new CubeTextureLoader(); // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n\n  const texture = loader.load([{\n    side1\n  }, {\n    side2\n  }, {\n    side3\n  }, {\n    side4\n  }, {\n    side5\n  }, {\n    side6\n  }]); // Set the scene background property to the resulting texture.\n\n  scene.background = texture;\n  return null;\n} // Geometry\n\n\n_s2(SkyBox, \"H/W0sI++KbHVw4gYmxbTnW2ERRY=\", false, function () {\n  return [useThree];\n});\n\n_c2 = SkyBox;\n\nfunction Sphere() {\n  _s3();\n\n  const {\n    scene,\n    gl\n  } = useThree(); // The cubeRenderTarget is used to generate a texture for the reflective sphere.\n  // It must be updated on each frame in order to track camera movement and other changes.\n\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n    format: RGBFormat,\n    generateMipmaps: true,\n    minFilter: LinearMipmapLinearFilter\n  });\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\n  cubeCamera.position.set(0, 0, 0);\n  scene.add(cubeCamera); // Update the cubeCamera with current renderer and scene.\n\n  useFrame(() => cubeCamera.update(gl, scene));\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    visible: true,\n    position: [0, 0, 0],\n    rotation: [0, 0, 0],\n    castShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      attach: \"geometry\",\n      args: [2, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      attach: \"material\",\n      envMap: cubeCamera.renderTarget.texture,\n      color: \"white\",\n      roughness: 0.1,\n      metalness: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n} // Lights\n\n\n_s3(Sphere, \"I09BJLOygNbL+Luyz2CCrvQJp5s=\", false, function () {\n  return [useThree, useFrame];\n});\n\n_c3 = Sphere;\n\nfunction Space() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"rot\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      className: \"canvas\",\n      children: [/*#__PURE__*/_jsxDEV(CameraControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Sphere, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SkyBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_c4 = Space;\nexport default Space;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CameraControls\");\n$RefreshReg$(_c2, \"SkyBox\");\n$RefreshReg$(_c3, \"Sphere\");\n$RefreshReg$(_c4, \"Space\");","map":{"version":3,"sources":["C:/Users/houss/desktop/wayz/src/Space/Space.js"],"names":["React","useRef","Canvas","extend","useThree","useFrame","CubeTextureLoader","CubeCamera","WebGLCubeRenderTarget","RGBFormat","LinearMipmapLinearFilter","OrbitControls","side1","side2","side3","side4","side5","side6","CameraControls","camera","gl","domElement","controls","current","update","SkyBox","scene","loader","texture","load","background","Sphere","cubeRenderTarget","format","generateMipmaps","minFilter","cubeCamera","position","set","add","renderTarget","Space"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\r\nimport {\r\n  CubeTextureLoader,\r\n  CubeCamera,\r\n  WebGLCubeRenderTarget,\r\n  RGBFormat,\r\n  LinearMipmapLinearFilter\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport \"./Space.css\";\r\nimport side1 from './side1.jpg';\r\nimport side2 from './side2.jpg';\r\nimport side3 from './side3.jpg';\r\nimport side4 from './side4.jpg';\r\nimport side5 from './side5.jpg';\r\nimport side6 from './side6.jpg';\r\nextend({ OrbitControls });\r\n\r\nconst CameraControls = () => {\r\n  // Get a reference to the Three.js Camera, and the canvas html element.\r\n  // We need these to setup the OrbitControls class.\r\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef();\r\n  useFrame(() => controls.current.update());\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      autoRotate={true}\r\n      enableZoom={false}\r\n    />\r\n  );\r\n};\r\n\r\n// Loads the skybox texture and applies it to the scene.\r\nfunction SkyBox() {\r\n  const { scene } = useThree();\r\n  const loader = new CubeTextureLoader();\r\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\r\n  const texture = loader.load([\r\n  {side1},\r\n  {side2},\r\n  {side3},\r\n  {side4},\r\n  {side5},\r\n  {side6}\r\n  ]);\r\n\r\n  // Set the scene background property to the resulting texture.\r\n  scene.background = texture;\r\n  return null;\r\n}\r\n\r\n// Geometry\r\nfunction Sphere() {\r\n  const { scene, gl } = useThree();\r\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\r\n  // It must be updated on each frame in order to track camera movement and other changes.\r\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\r\n    format: RGBFormat,\r\n    generateMipmaps: true,\r\n    minFilter: LinearMipmapLinearFilter\r\n  });\r\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\r\n  cubeCamera.position.set(0, 0, 0);\r\n  scene.add(cubeCamera);\r\n\r\n  // Update the cubeCamera with current renderer and scene.\r\n  useFrame(() => cubeCamera.update(gl, scene));\r\n\r\n  return (\r\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]} castShadow>\r\n      <directionalLight intensity={0.5} />\r\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\r\n      <meshBasicMaterial\r\n        attach=\"material\"\r\n        envMap={cubeCamera.renderTarget.texture}\r\n        color=\"white\"\r\n        roughness={0.1}\r\n        metalness={1}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// Lights\r\nfunction Space() {\r\n  return (\r\n    <div id='rot'>\r\n    <Canvas className=\"canvas\">\r\n      <CameraControls />\r\n      <Sphere />\r\n      <SkyBox />\r\n    </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Space;\r\n"]},"metadata":{},"sourceType":"module"}